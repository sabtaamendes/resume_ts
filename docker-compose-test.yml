services:
  test_app:
    build:
      context: .  # o build será feito no diretorio atual
      dockerfile: Dockerfile
    container_name: test_app
    ports:
      - ${PORT:-4000}:4000 # tudo o que for depois do ":-" é caso o env estiver vazio, o valor será o 4000
    volumes:
      - .:/usr/src/app
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_DB: ${POSTGRES_DB}
    networks:
      - app-network
    depends_on:
      - db
    
    # entrypoint em desenvolvimento e ou teste
    entrypoint: [
      "sh", "-c", "
      npx prisma generate && 
      npx prisma migrate dev && 
      npx prisma db seed && 
      npm run build && 
      npm start"
    ]
    # o npx prisma migrate deploy é o comando usado somente em produção
    # entrypoint são os comandos que serão executados no container no momento da inicialização
  
  # entrypoint em produção
  entrypoint: [
    "sh", "-c", "
    npx prisma generate &&
    npx prisma migrate deploy &&
    npm run build &&
    npm start"
  ]


  db:
    image: postgres:latest
    container_name: db
    restart: unless-stopped
    ports:
      - ${POSTGRES_PORT:-5433}:5432 #5433 é a porta do container e o 5432 é a porta do hosts
    volumes:
      - postgres_data:/var/lib/postgresql/data  #postgres_data é o nome do volume
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    networks:
      - app-network

volumes:
  postgres_data:
    driver: local

networks:
  app-network:
    driver: bridge